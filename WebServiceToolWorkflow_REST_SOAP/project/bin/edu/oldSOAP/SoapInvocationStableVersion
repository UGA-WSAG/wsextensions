package edu.uga.soapClient;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.wsdl.Message;
import javax.wsdl.WSDLException;
import javax.xml.namespace.QName;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.axiom.om.impl.llom.OMAttributeImpl;
import org.apache.axis2.AxisFault;
import org.apache.axis2.client.ServiceClient;
import org.apache.axis2.rpc.client.RPCServiceClient;
import org.apache.log4j.Logger;
import org.jdom.Attribute;
import org.jdom.Element;
import org.jdom.Namespace;

import com.predic8.wsdl.Operation;
import com.predic8.wsdl.PortType;


/**
 * This class invokes the given operation in a given SOAP service taking in the 
 * required user inputs and returns an Axis OMElement
 * @author Singaram, Akshay Choche
 *
 */
public class SoapInvocation{

    private URL url;
    private String operationName;
    private SchemaParser parseSchema;
    private WSDLParser parse;
    private String bindingType;
    private List<WebServiceInvokeInput> inputList = new ArrayList<WebServiceInvokeInput>();
    
    /**
     * Constructor for the SoapInvocation to set the required parameters
     * @param url - wsdlUrl
     * @param operationName - operation to be invoked
     * @throws MalformedURLException
     */
    public SoapInvocation(URL url, String operationName, List<WebServiceInvokeInput> inputList) throws MalformedURLException, WSDLException{
    	this.inputList = inputList;
        this.url = url;
        this.operationName = operationName;
        //this.parseSchema = new SchemaParser(url.toString());
        //this.parse = new WSDLParser(url);
        //this.bindingType = parse.getWsdlType();
        //if(this.bindingType == null)
        	//this.bindingType = "document";
    }

    /**
     * Auto generated
     * @return
     */
    public URL getUrl(){
        return url;
    }

    /**
     * Auto generated
     * @param url
     */
    public void setUrl(URL url){
        this.url = url;
    }

    /**
     * Auto generated
     * @return
     */
    public String getOperationName(){
        return operationName;
    }

    /**
     * Auto generated
     * @param operationName
     */
    public void setOperationName(String operationName){
        this.operationName = operationName;
    }

    /**
     * Auto generated
     * @return
     */
    public SchemaParser getParseSchema(){
        return parseSchema;
    }

    /**
     * Auto generated
     * @param parseSchema
     */
    public void setParseSchema(SchemaParser parseSchema){
        this.parseSchema = parseSchema;
    }

    /**
     * Auto generated
     * @return
     */
    public WSDLParser getParse(){
        return parse;
    }

    /**
     * Auto generated
     * @param parse
     */
    public void setParse(WSDLParser parse){
        this.parse = parse;
    }

    /**
     * Auto generated
     * @return
     */
    public String getBindingType(){
        return bindingType;
    }

    /**
     * Auto generated
     * @param bindingType
     */
    public void setBindingType(String bindingType){
        this.bindingType = bindingType;
    }

    /**
     * Auto generated
     * @return
     */
    public List<WebServiceInvokeInput> getInputList(){
        return inputList;
    }
    
    /**
     * Auto generated
     * @param inputList
     */
    public void setInputList(List<WebServiceInvokeInput> inputList){
        this.inputList = inputList;
    }

    /**
     * Takes in the parameters required and initiates the RPC OMElement handler process where
     * it constructs the SOAP body starting with operation info as the header and then
     * with the list of part elements which are parsed through under the provided input message
     * if a complex element is encounterd in the list of parsed elements, OMElemenetHandler is called
     * @param msgObj - input message
     * @param complexElementName - complex element name
     * @param schemaElementList - schema list for the WSDL
     * @param complexType - if the element is of complex type
     * @param message - OMElement message
     * @return OMElement object
     * @throws WSDLException
     */
    public OMElement omElementHandler_RPC(Message msgObj, String complexElementName, List<Element> schemaElementList, Boolean complexType, OMElement message) throws WSDLException{
        OMFactory fac = OMAbstractFactory.getOMFactory();
        OMElement omElement = fac.createOMElement(operationName, null);//(msgObj.getQName().getLocalPart(), null);
        //if element is an operation, replace omElement object with message for final wrap up
        message.setLocalName(operationName);
            omElement = message;
        if (complexElementName != null)
        {
            omElement = fac.createOMElement(complexElementName, null);
        }

        Map<com.ibm.wsdl.PartImpl, com.ibm.wsdl.PartImpl> PartList = msgObj.getParts();
        Collection<com.ibm.wsdl.PartImpl> pp = PartList.values();

        int a = 1;
        for (com.ibm.wsdl.PartImpl part : pp)
        {
            QName q = part.getTypeName();
            String partNamespace = q.getNamespaceURI();
            String partType = q.getLocalPart();

            if (partNamespace.equalsIgnoreCase("http://www.w3.org/2001/XMLSchema"))//if (partNamespace.contains("XMLSchema")) //
            {
                for(WebServiceInvokeInput input : inputList)
                {
                    if(input.getName().equals(part.getName()))
                    {
                        OMElement omChildElement = fac.createOMElement(part.getName(), null);
                        OMAttribute attribute = new OMAttributeImpl("xsi:type", null, "xsd:"+partType, fac);
                        omChildElement.addAttribute(attribute);
                        omChildElement.setText(input.getValue());
                        omElement.addChild(omChildElement);
                    }
                }
            } 
            else
            {
                //For time being lets assume that the schema is in the same documet
                complexType = true;
                boolean flagFound = false;
                for (Element e : schemaElementList)
                {
                    if (parseSchema.getElementElemOfSchema(partType, e) != null)
                    {
                        flagFound = true;
                        Element complexElement = parseSchema.getElementElemOfSchema(partType, e);
                        String complexElementNameAttribute = part.getName();
                        OMElement omComplexElement =
                                omElementHandler(complexElement, complexElementNameAttribute, e, complexType, null);
                        omElement.addChild(omComplexElement);
                    }
                }

                if (!flagFound)
                {
                    //The schema is external to file 
                    SchemaParser extSchema = new SchemaParser(partNamespace);
                    Element root = extSchema.getRootElement();
                    List<Element> schemaList = parseSchema.getSchemaElemList(root);

                    for (Element e : schemaList)
                    {
                        if (parseSchema.getElementElemOfSchema(partType, e) != null)
                        {
                            flagFound = true;
                            Element complexElement = parseSchema.getElementElemOfSchema(partType, e);
                            String complexElementNameAttribute = part.getName();
                            OMElement omComplexElement =
                                    omElementHandler(complexElement, complexElementNameAttribute, e, complexType, null);
                            omElement.addChild(omComplexElement);
                        }//if ends
                    }// for ends
                    if (!flagFound)
                    {
                        System.out.println("Element " + partType + " could not be found in the schema "+partNamespace);
                        return null;
                    }
                }
            }
        }
        return omElement;

    }
    
    /**
     * Takes in the parameters required and initiates the OMElement handler process where
     * it constructs the SOAP body starting with operation info as the header and then
     * with the list of its children defined in the XML schema definition of the WSDL
     * if a complex element is encountered in the list of parsed elements, 
     * OMElemenetHandler is called recursively until the leaf node elements of the provided operation are reached 
     * @param element - root element
     * @param complexElementName - complex element name
     * @param schemaElement - schema which contains the element
     * @param complexType - if the element is of complex type
     * @param message - OMElement message
     * @return Axis OMElement object
     * @throws WSDLException
     */
    public OMElement omElementHandler(Element element, String complexElementName, Element schemaElement, Boolean complexType, OMElement message) throws WSDLException{
        OMFactory fac = OMAbstractFactory.getOMFactory();
        OMElement omElement = fac.createOMElement(element.getAttributeValue("name"), null);
        
        /**
         * if element is an operation, replace omElement object with message for final wrap up 
         * else its a recursive call for complex element
         */
        if (element.getAttributeValue("name").equals(operationName)){
            omElement = message;
        }
        /**
         * For handelling complex elements
         */
        if (complexElementName != null){
            omElement = fac.createOMElement(complexElementName, null);
        }

        List<Element> childrenList = null;
        //childrenList = parse.getChildElement(childrenList, element, complexType, schemaElement);
        childrenList = parse.getChildElement(childrenList, element, complexType, schemaElement);
        //System.out.println(childrenList);

        
        for (Element child : childrenList){
            //for simple types
            //if (child.getAttributeValue("type").contains(":")){
        	if (child.getAttributeValue("type").contains(":")){
                //for list
                if (child.getAttributeValue("maxOccurs") != null){
                    if (child.getAttributeValue("maxOccurs").equals("unbounded")){
                      //find the matching element in the input list to fill up the value from the user
                        for(WebServiceInvokeInput input : inputList){
                            if(input.getName().equals(child.getAttributeValue("name"))){
                                //for elements in the first level where operation is the parent
                                if(child.getParentElement().getParentElement().getAttributeValue("name") == null){
                                    //check if operation name equals input type in the list
                                    if(child.getParentElement().getParentElement().getParentElement().getAttributeValue("name").equals(input.getType())){
                                        OMElement omChildElement = fac.createOMElement(child.getAttributeValue("name"), null);
                                        omChildElement.setText(input.getValue());
                                        omElement.addChild(omChildElement);
                                    }
                                }else{
                                	//for elements from the second level
                                    if(child.getParentElement().getParentElement().getAttributeValue("name").equals(input.getType())){
                                        OMElement omChildElement = fac.createOMElement(child.getAttributeValue("name"), null);
                                        omChildElement.setText(input.getValue());
                                        omElement.addChild(omChildElement);
                                    }
                                }
                            }
                        }
                    } else if (!child.getAttributeValue("maxOccurs").equals("1")){
                        //Max occurs is a definitive number
                        //TODO
                    } else if(child.getAttributeValue("maxOccurs").equals("1")){
                    	//for a simple type element with max occurs defined as 1
                        //find the matching element in the input list to fill up the value from the user
                        for(WebServiceInvokeInput input : inputList){
                            if(input.getName().equals(child.getAttributeValue("name"))){
                                //for elements in the first level where operation is the parent
                                if(child.getParentElement().getParentElement().getAttributeValue("name") == null){
                                    //check if operation name equals input type in the list
                                	OMNamespace rootNameSpace = fac.createOMNamespace(omElement.getNamespaceURI(), omElement.getNamespace().getPrefix());
                                	OMElement omChildElement = fac.createOMElement(child.getAttributeValue("name"), rootNameSpace);
                                    omChildElement.setText(input.getValue());
                                    omElement.addChild(omChildElement);
                                    //}
                                }else{
                                	//for elements from the second level
                                    if(child.getParentElement().getParentElement().getAttributeValue("name").equals(input.getType())){
                                        OMElement omChildElement = fac.createOMElement(child.getAttributeValue("name"), null);
                                        omChildElement.setText(input.getValue());
                                        omElement.addChild(omChildElement);
                                    }
                                }
                            }
                        }
                    }
                }else{
                    System.out.println("Enter " + child.getAttribute("name").getValue());
                    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
                    String inputValue = null;
                    try{
                        inputValue = br.readLine();
                    } catch (IOException e){
                        e.printStackTrace();
                    }
                    OMElement omChildElement = fac.createOMElement(child.getAttributeValue("name"), null);
                    omChildElement.setText(inputValue);
                    omElement.addChild(omChildElement);
                }
            }else{
                complexType = true;
                Element complexElement = parseSchema.getElementElemOfSchema(child.getAttributeValue("type"), schemaElement);
                String complexElementNameAttribute = child.getAttributeValue("name");

                OMElement omComplexElement = omElementHandler(complexElement, complexElementNameAttribute, schemaElement, complexType, null);
                omElement.addChild(omComplexElement);
            }
        }//for
        return omElement;
    }

    /**
     * This method initiates the handler process for constructing the SOAP message based on 
     * the type of WSDL if it is rpc-encoded or doc-literal. It is called from the dunamicInvoke().
     * It gets the required initial parameters from the WSDL and calls the appropriate 
     * OMElement handler to build the SOAP body 
     * @return OMElement - completely filled OMElement
     * @throws WSDLException
     */
    public OMElement elementHandler() throws WSDLException{
        Boolean complexType = false;
        OMFactory fac = OMAbstractFactory.getOMFactory();
        String MessageName = null;
        OMElement message = null;
        Message messageObject = null;
        OMElement finalMessage = null;
        List<Element> schemaList = null;
        
        //for dynamic payload creation
        OMNamespace nameSpace = fac.createOMNamespace(parse.getTargetNameSpace(), "");

        //for rpc encoded
        if (bindingType.equals("rpc")){
            //creates a message object for the element under the input message
            MessageName = WSDLParser.getInputMessageElementName_RPC(operationName);
            message = fac.createOMElement(MessageName, nameSpace);
            messageObject = parse.getInputMessage(operationName);

            //retrieve the schema element list
            Element root = parseSchema.getRootElement();
            schemaList = parseSchema.getSchemaElemList(root);

            finalMessage = omElementHandler_RPC(messageObject, null, schemaList, complexType, message);
        }else if (bindingType.equalsIgnoreCase("document")) {
            //creates a message object for the element under the input message
            message = fac.createOMElement(WSDLParser.getInputMessageElementName(operationName), nameSpace);
            messageObject = parse.getInputMessage(operationName);

            //retrieve the schema element
            Element root = parseSchema.getRootElement();
            schemaList = parseSchema.getSchemaElemList(root);
            Element schemaElement = null;
            if(schemaList.size()==1)
            {
                schemaElement = schemaList.get(0);
            }

            Element rootElement = parse.getPartElementFromInputMessage(messageObject);
            finalMessage = omElementHandler(rootElement, null, schemaElement, complexType, message);
        }
        
        //print the xml SOAP message to a file
        try{
        	PrintWriter writer = new PrintWriter(new File("SOAPMessage.xml"));
        	writer.print(message);
        	writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        //System.out.println(finalMessage);
        return finalMessage;
    }
    
    public HashMap<String, String> convertIPToHashMap(List<WebServiceInvokeInput> input){
    	HashMap<String, String> inputMap = new HashMap<String, String>();
    	for(WebServiceInvokeInput in: input){
    		inputMap.put(in.getName(), in.getValue());
    	}
    	return inputMap;
    }

    /**This is called directly from the GlycomicsPortal after setting the required attributes like
     * WSDL url, operation information and the list of input elements with filled user inputs
     * This creates the Axis ServiceClient dynamically based on the provided wsdl url and other info
     * and invokes the service passing constructed SOAP message and gets the OMElement response back from the service
     * @return OMElement - completely filled OMElement
     * @throws WSDLException
     */
    public String dynamicInvoke() throws WSDLException{
        //dynamic service client
        ServiceClient serviceClient = null;
       
        try{
            serviceClient = new ServiceClient(null, url, null, null);
        } 
        catch (AxisFault e){
            System.out.println(e);
            e.printStackTrace();
        }

        /**for dynamic service client parse wsdl file to get the operation qName and then call sendReceive()**/
        QName qName = WSDLParser.getOperationQname(operationName);
        
        
        OMElement result = null;
        String parsedResultForGalaxy = "";
        try
        {
            if(serviceClient == null)
            {
                System.out.println("null");
            }
            else
            {
                //store the xml response in the OMElement object result
                
            	OMElement element = SOAPMessageBuilder.createSOAPMessage(this.url, this.operationName, convertIPToHashMap(this.inputList));
            	System.out.println(element);
            	result = serviceClient.sendReceive(qName, element);
            	//result = serviceClient.sendReceive(qName, elementHandler());
            	parsedResultForGalaxy = convertOMElementToString(result);
            }
        }
        catch (AxisFault e)
        {
        	System.out.println("Exception");
            OMFactory fac = OMAbstractFactory.getOMFactory();
            OMElement exception = fac.createOMElement(operationName, null);;
            exception.setText(e.toString());
            return "error";//.printStackTrace();
        }
        System.out.println("Result is: "+ result);
        return parsedResultForGalaxy;
    }
    
    /**
     * Converts the given OMElement into String
     * @param element
     */
    public String convertOMElementToString(OMElement element){
    	String output = "";
    	LinkedList<OMElement> listOfElements = new LinkedList<OMElement>();
    	listOfElements.add(element);
    	while(!listOfElements.isEmpty()){
    		OMElement currentElement = listOfElements.removeFirst();
    		if(currentElement.getText() != null && !currentElement.getText().equals("")){
    			output += currentElement.getText() + "\n";
    		}
    		Iterator<OMElement> childs = currentElement.getChildElements();
        	while(childs.hasNext()){
        		listOfElements.addLast(childs.next());
        	}
    	}
    	return output;
    }
    
    public void test(){
	try {	
    		
			WebServiceInvokeInput firstOperand = new WebServiceInvokeInput();
			firstOperand.setName("xpath:/run/email");
			firstOperand.setRequired(true);
			firstOperand.setValue("akshaychoche@gmail.com");
			WebServiceInvokeInput secondOperand = new WebServiceInvokeInput();
			secondOperand.setName("xpath:/run/parameters/program");
			secondOperand.setRequired(true);
			secondOperand.setValue("blastp");
			WebServiceInvokeInput thirdOperand = new WebServiceInvokeInput();
			thirdOperand.setName("xpath:/run/parameters/stype");
			thirdOperand.setRequired(true);
			thirdOperand.setValue("protein");
			WebServiceInvokeInput fourthOperand = new WebServiceInvokeInput();
			fourthOperand.setName("xpath:/run/parameters/sequence");
			fourthOperand.setRequired(true);
			fourthOperand.setValue("MYLPSKIGQKGDEVDKMKSANEEASPSGSSSGRSTKSPGVFPTFSVAAIPPRAAVSSLATRGIFDLSERPKEISCRNDDAFVAHGAYLLFNAIKRKLTESSYAKVVIGLSGGSTPLPIYSALRHLALASADHEPGRAATHLATAVPEFSEELQRDAKGSDSALDWTRVFFFLVDERYVHPTHADSNQRSIRKHLLGQPNGVACDQPGAECGGDVLPVPEKNLIFPDTSLPLEDCIVKYRSALLELLAATQQIDLVTLGLGPDGHIASIFPPLSEEDLKEQMNPNPIVLHTTTSRFAGFDRITVSLQLLCGAHQKVFFLKGDEKIRLWRDMQDDARSKSVAEFPALAVLQSGNVKVVAVPPLDVHEEHLQQQLRADRTFLSVVVLGASGDLAHKKTYPALFSLFCEGLLPPHFHIVGYARSKMTFDQFWEKISQKLKSLSSFFCRRASAIDLLASFKSHCSYLQGLYDRPADFANLGNHLKEVEGDAEQVGRVLYLALPPDVFLPSVKSYRQSCWNTKGWNRVVVEKPFGRDLKSSDKLSASLMALLREREIFRIDHYLGKEMSLSLTALRFANVAFMPLFHRDYVHSVRITFKEQSGTWRRGGYFDNYGIIRDVMQNHMIQLLTLVAMERPASLKDDDIRDEKVKVLKQMPPVKISETVLGQFTKSVDGQLPGYTDDDTVPKDSKTPTFCTCVLWINNERWSGVPFIFKAGKALESKTTEVRVQLREAPAGASFFHEPNLTPNELVILVQPHEAVYLKIHTKKPGLLSQGLQPTELDLSVMDRFDVERLPDAYERLLLDVIRGDKQNFVRTDELREAWRIFTPLLHEIEEKNIDPLPYPAGSSGPSASYDLIQKYYSYKQSNYKWTPPKRETSSDTVQ");
			WebServiceInvokeInput fifthOperand = new WebServiceInvokeInput();
			fifthOperand.setName("xpath:/run/parameters/database/string");
			fifthOperand.setRequired(true);
			fifthOperand.setValue("uniprotkb");
			
			List<WebServiceInvokeInput> ip = new ArrayList<WebServiceInvokeInput>();
			ip.add(firstOperand);
			ip.add(secondOperand);
			ip.add(thirdOperand);
			ip.add(fourthOperand);
			ip.add(fifthOperand);
			
    		/*
    		WebServiceInvokeInput firstOperand = new WebServiceInvokeInput();
			firstOperand.setName("xpath:/Add/a");
			firstOperand.setRequired(true);
			firstOperand.setValue("20");
			WebServiceInvokeInput secondOperand = new WebServiceInvokeInput();
			secondOperand.setName("xpath:/Add/b");
			secondOperand.setRequired(true);
			secondOperand.setValue("20");
			List<WebServiceInvokeInput> ip = new ArrayList<WebServiceInvokeInput>();
			ip.add(firstOperand);
			ip.add(secondOperand);
			*/
			SoapInvocation soapWebClient = new SoapInvocation(new URL("http://www.ebi.ac.uk/Tools/services/soap/wublast?wsdl"), "run", ip);
			//SoapInvocation soapWebClient = new SoapInvocation(new URL("http://www.html2xml.nl/Services/Calculator/Version1/Calculator.asmx?WSDL"), "Add", ip);
			System.out.println(soapWebClient.dynamicInvoke());
    	} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WSDLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public static void main(String[] args){
    	try {	
    		/*
			WebServiceInvokeInput firstOperand = new WebServiceInvokeInput();
			firstOperand.setName("xpath:/run/email");
			firstOperand.setRequired(true);
			firstOperand.setValue("akshaychoche@gmail.com");
			WebServiceInvokeInput secondOperand = new WebServiceInvokeInput();
			secondOperand.setName("xpath:/run/parameters/program");
			secondOperand.setRequired(true);
			secondOperand.setValue("blastp");
			WebServiceInvokeInput thirdOperand = new WebServiceInvokeInput();
			thirdOperand.setName("xpath:/run/parameters/stype");
			thirdOperand.setRequired(true);
			thirdOperand.setValue("protein");
			WebServiceInvokeInput fourthOperand = new WebServiceInvokeInput();
			fourthOperand.setName("xpath:/run/parameters/sequence");
			fourthOperand.setRequired(true);
			fourthOperand.setValue("MYLPSKIGQKGDEVDKMKSANEEASPSGSSSGRSTKSPGVFPTFSVAAIPPRAAVSSLATRGIFDLSERPKEISCRNDDAFVAHGAYLLFNAIKRKLTESSYAKVVIGLSGGSTPLPIYSALRHLALASADHEPGRAATHLATAVPEFSEELQRDAKGSDSALDWTRVFFFLVDERYVHPTHADSNQRSIRKHLLGQPNGVACDQPGAECGGDVLPVPEKNLIFPDTSLPLEDCIVKYRSALLELLAATQQIDLVTLGLGPDGHIASIFPPLSEEDLKEQMNPNPIVLHTTTSRFAGFDRITVSLQLLCGAHQKVFFLKGDEKIRLWRDMQDDARSKSVAEFPALAVLQSGNVKVVAVPPLDVHEEHLQQQLRADRTFLSVVVLGASGDLAHKKTYPALFSLFCEGLLPPHFHIVGYARSKMTFDQFWEKISQKLKSLSSFFCRRASAIDLLASFKSHCSYLQGLYDRPADFANLGNHLKEVEGDAEQVGRVLYLALPPDVFLPSVKSYRQSCWNTKGWNRVVVEKPFGRDLKSSDKLSASLMALLREREIFRIDHYLGKEMSLSLTALRFANVAFMPLFHRDYVHSVRITFKEQSGTWRRGGYFDNYGIIRDVMQNHMIQLLTLVAMERPASLKDDDIRDEKVKVLKQMPPVKISETVLGQFTKSVDGQLPGYTDDDTVPKDSKTPTFCTCVLWINNERWSGVPFIFKAGKALESKTTEVRVQLREAPAGASFFHEPNLTPNELVILVQPHEAVYLKIHTKKPGLLSQGLQPTELDLSVMDRFDVERLPDAYERLLLDVIRGDKQNFVRTDELREAWRIFTPLLHEIEEKNIDPLPYPAGSSGPSASYDLIQKYYSYKQSNYKWTPPKRETSSDTVQ");
			WebServiceInvokeInput fifthOperand = new WebServiceInvokeInput();
			fifthOperand.setName("xpath:/run/parameters/database/string");
			fifthOperand.setRequired(true);
			fifthOperand.setValue("uniprotkb");
			
			List<WebServiceInvokeInput> ip = new ArrayList<WebServiceInvokeInput>();
			ip.add(firstOperand);
			ip.add(secondOperand);
			ip.add(thirdOperand);
			ip.add(fourthOperand);
			ip.add(fifthOperand);
			*/
    		WebServiceInvokeInput firstOperand = new WebServiceInvokeInput();
    		firstOperand.setName("xpath:/decode/base64");
    		firstOperand.setRequired(true);
    		firstOperand.setValue("");
			
    		List<WebServiceInvokeInput> ip = new ArrayList<WebServiceInvokeInput>();
    		ip.add(firstOperand);
    		/*
    		WebServiceInvokeInput firstOperand = new WebServiceInvokeInput();
			firstOperand.setName("xpath:/Add/a");
			firstOperand.setRequired(true);
			firstOperand.setValue("20");
			WebServiceInvokeInput secondOperand = new WebServiceInvokeInput();
			secondOperand.setName("xpath:/Add/b");
			secondOperand.setRequired(true);
			secondOperand.setValue("20");
			List<WebServiceInvokeInput> ip = new ArrayList<WebServiceInvokeInput>();
			ip.add(firstOperand);
			ip.add(secondOperand);
			*/
			SoapInvocation soapWebClient = new SoapInvocation(new URL("http://mango.ctegd.uga.edu/jkissingLab/SWS/webservices/converters.wsdl"), "decode", ip);
			//SoapInvocation soapWebClient = new SoapInvocation(new URL("http://www.html2xml.nl/Services/Calculator/Version1/Calculator.asmx?WSDL"), "Add", ip);
			System.out.println("Before Invocation!!!!");
			System.out.println(soapWebClient.dynamicInvoke());
    	} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WSDLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
}